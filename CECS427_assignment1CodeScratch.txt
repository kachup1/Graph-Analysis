import networkx as nx
import matplotlib.pyplot as plt
import numpy as np
import math
import sys #reads command line arguments

'''
Function that reads the command lines from terminal

python ./graph.py --input graph_file.gml --create_random_graph 
--nodes n --constant c --plot --BFS a --output out_graph_file.gml

--input graph_file.gml      : specifies input file. Describes the graphs structure
--create_random_graph       : indicates that a new random graph should be created.
--nodes n                   : number of nodes
--constant c                : probability 
--BFS a                     : specifies the node (a) to compute all the shortest paths
--plot                      : requests that the graph be plotted
--output out_graph_file.gml : where resulting graph should be saved.
'''

def CommandLineArgs(argv):
    inputFile = ''
    create_random_graph = False
    nodes = 0
    constant = 0.0
    probability = 0.0
    plot = False
    BFS = ''
    outputFile = ''

    i = 1
    while i < len(argv):
        if argv[i] == '--input':
            inputFile = argv[i+1]
            if not inputFile.endswith('.gml'):
                print("Error: Input file must be of type .gml")
                sys.exit(1)
            i += 2
        elif argv[i] == '--create_random_graph':
            create_random_graph = True
            i += 1
        elif argv[i] == '--nodes':
            try:
                nodes = int(argv[i+1])
                i += 2
            except ValueError:
                print("Error: --nodes must be an integer.")
                sys.exit(1)
        elif argv[i] == '--constant':
            try:
                constant = float(argv[i+1])
                probability = (constant * math.log(nodes)) / nodes
                i += 2
            except ValueError:
                print("Error: --constant must be a float.")
                sys.exit(1)
        elif argv[i] == '--plot':
            plot = True
            i += 1
        elif argv[i] == '--BFS':
            BFS = argv[i+1]
            i += 2
        elif argv[i] == '--output':
            outputFile = argv[i+1]
            i += 2
        else:
            print(f"Error: Invalid argument {argv[i]}")
            sys.exit(1)
    
    return [inputFile, create_random_graph, nodes, probability, plot, BFS, outputFile]


def main():

    input = CommandLineArgs(sys.argv)

    inputFile = input[0]
    create_random_graph = input[1]
    nodes = input[2]
    probability = input[3]
    plot = input[4]
    BFS = input[5]
    outputFile = input[6]  
 


    if inputFile:
        G2 = nx.read_gml(inputFile) #loads graph from gml file
    elif create_random_graph:
        if nodes <= 0:
            print("Error. Nodes must be greater than 0.")
            sys.exit(1)
        G = nx.erdos_renyi_graph(nodes, probability)# generates erdos
        G = nx.relabel_nodes(G, lambda x: str(x)) #relabels nodes to str
        
    if BFS:
        if BFS not in G2:
            print("Error. Node {BFS} does not exist in the graph.")
            sys.exit(1)
        bfsPaths = nx.single_source_shortest_path_length(G2, BFS)
    if BFS and plot:
        nx.draw(G2, with_labels=True)
        plt.show()
    else:
        nx.draw(G, with_labels=True)
        plt.show()
    
    if outputFile:
        nx.write_gml(G, outputFile)


    print(sys.argv[1:])
   
if __name__ == "__main__":
    main()


-----------------------------------------------------------------------------------

import networkx as nx
import matplotlib.pyplot as plt
import math
import sys

def CommandLineArgs(argv):
    inputFile = ''
    create_random_graph = False
    nodes = 0
    constant = 0.0
    probability = 0.0
    plot = False
    BFS = ''
    outputFile = ''

    i = 1
    while i < len(argv):
        if argv[i] == '--input':
            inputFile = argv[i+1]
            if not inputFile.endswith('.gml'):
                print("Error: Input file must be of type .gml")
                sys.exit(1)
            i += 2
        elif argv[i] == '--create_random_graph':
            create_random_graph = True
            i += 1
        elif argv[i] == '--nodes':
            try:
                nodes = int(argv[i+1])
                i += 2
            except ValueError:
                print("Error: --nodes must be an integer.")
                sys.exit(1)
        elif argv[i] == '--constant':
            try:
                constant = float(argv[i+1])
                probability = (constant * math.log(nodes)) / nodes
                i += 2
            except ValueError:
                print("Error: --constant must be a float.")
                sys.exit(1)
        elif argv[i] == '--plot':
            plot = True
            i += 1
        elif argv[i] == '--BFS':
            BFS = argv[i+1]
            i += 2
        elif argv[i] == '--output':
            outputFile = argv[i+1]
            i += 2
        else:
            print(f"Error: Invalid argument {argv[i]}")
            sys.exit(1)
    
    return [inputFile, create_random_graph, nodes, probability, plot, BFS, outputFile]

def getTreePositions(tree, root, x_gap=2.5, y_gap=2.5):
    pos = {}
    
    def layout(node, x, y, layer_height, horiz_gap):
        pos[node] = (x, y)
        neighbors = list(tree.neighbors(node))
        if not neighbors:
            return
        dx = horiz_gap / max(len(neighbors), 1)
        next_x = x - (dx * (len(neighbors) - 1)) / 2
        for neighbor in neighbors:
            layout(neighbor, next_x, y - y_gap, y_gap, dx)
            next_x += dx
    
    layout(root, 0, 0, y_gap * len(tree.nodes), x_gap)
    return pos

def main():
    input = CommandLineArgs(sys.argv)
    
    inputFile = input[0]
    create_random_graph = input[1]
    nodes = input[2]
    probability = input[3]
    plot = input[4]
    BFS = input[5]
    outputFile = input[6]

    if inputFile:
        G = nx.read_gml(inputFile)
    elif create_random_graph:
        if nodes <= 0:
            print("Error. Nodes must be greater than 0.")
            sys.exit(1)
        G = nx.erdos_renyi_graph(nodes, probability)
        G = nx.relabel_nodes(G, lambda x: str(x))
        if plot:
            plt.figure()  # Default size
            nx.draw(G, with_labels=True)
            plt.show()

    if BFS:
        if BFS not in G:
            print(f"Error. Node {BFS} does not exist in the graph.")
            sys.exit(1)
        elif BFS and input:
            # Compute BFS tree
            bfs_tree = nx.bfs_tree(G, source=BFS)
            
            # Get positions for the tree layout
            pos = getTreePositions(bfs_tree, BFS, x_gap=2.5, y_gap=2.5)
            
            # Draw the BFS tree with default figure size
            plt.figure()  # Default size
            nx.draw(bfs_tree, pos, with_labels=True, node_size=700, font_size=12, node_color='pink', edge_color='purple', font_weight='bold')
            plt.title(f"BFS Tree from Node {BFS}")
            plt.show()

    if outputFile:
        nx.write_gml(G, outputFile)

if __name__ == "__main__":
    main()
